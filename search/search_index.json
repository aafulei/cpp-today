{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CppToday","text":"<p>A minimal but complete Make-based C++23 project template.</p> <p>This project packages a simple C++23 command-line program with essential tools and workflows for building, testing, and maintaining the code. The program prints the current date in the <code>YY/MM/DD = Www</code> format (e.g. <code>25/05/14 = Wed</code>).</p> <p>Source code available at github.com/aafulei/cpp-today.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Minimal, complete C++23 project template</li> <li>All-in-one Make-based build system</li> <li>Test scripts for manual and automated testing</li> <li>Code formatting support with Clang Format</li> <li>Editor tooling support via Clangd</li> <li>Built-in CI/CD workflows using GitHub Actions</li> <li>Project documentation website built with MkDocs</li> <li>Source code documentation generated with Doxygen</li> <li>Software documentation in GNU-style man page</li> </ul>"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<ul> <li>macOS</li> <li>Linux</li> </ul>"},{"location":"#author","title":"Author","text":"<p>Aaron Fu Lei</p> <p>For source code and project files, please see the GitHub repository.</p>"},{"location":"build-system/","title":"Build System","text":"<p>This project features an all-in-one Make-based build system that enables users to build, run, test, and install the program using <code>make</code>. To get started, clone the GitHub repository, and run <code>make</code> with the desired targets.</p> <pre><code>make             # Build release version\nmake debug       # Build debug version\nmake run         # Build and run release version\nmake run-debug   # Build and run debug version\nmake test        # Build and test release version\nmake test-debug  # Build and test debug version\nmake install     # Install program and man page\nmake uninstall   # Uninstall program and man page\nmake clean       # Remove build files\n</code></pre> <p>To list all targets and options, run</p> <pre><code>make help\n</code></pre> <p>which will show</p> <pre><code>Usage: make [CXX=c++] [CXX_STANDARD=c++23] [INST_DIR=/usr/local/bin]\n            [MAN_DIR=/usr/local/share/man/man1] [ARGS] [target=all]\n\nTargets:\n  all            - Build release version (default)\n  release        - Build release version\n  debug          - Build debug version\n  run            - Build and run release version\n  run-release    - Build and run release version\n  run-debug      - Build and run debug version\n  test           - Build and test release version\n  test-release   - Build and test release version\n  test-debug     - Build and test debug version\n  man            - Build man page\n  dist           - Build program and man page\n  install        - Install program and man page\n  uninstall      - Uninstall program and man page\n  clean          - Remove release and debug build files\n  clean-release  - Remove release build files\n  clean-debug    - Remove debug build files\n  show           - Show operating system and compiler info\n  show-os        - Show operating system info\n  show-compiler  - Show compiler info\n  show-version   - Show version number\n  help           - Show this help message and exit\n\nVariables:\n  CXX            - C++ compiler (default: c++).\n  CXX_STANDARD   - C++ standard (default: c++23).\n  INST_DIR       - Install dir for program (default: /usr/local/bin)\n  MAN_DIR        - Install dir for man page (default: /usr/local/share/man/man1)\n  ARGS           - Command-line arguments to forward to program\n\nExamples:\n  make                          # Build release version\n  make all                      # Build release version\n  make release                  # Build release version\n  make debug                    # Build debug version\n  make run-debug                # Build and run debug version\n  make test-debug               # Build and test debug version\n  make dist                     # Build program and man page\n  make CXX=g++                  # Build with g++ compiler\n  make CXX_STANDARD=c++20       # Build with C++20 standard\n  make INST_DIR=/opt install    # Install to /opt\n  make INST_DIR=/opt uninstall  # Uninstall from /opt\n  make MAN_DIR=/opt install     # Install, saving man page to /opt\n  make MAN_DIR=/opt uninstall   # Uninstall, removing man page from /opt\n  make ARGS=--help run-debug    # Run debug-version program with --help\n</code></pre> <p>For source code and project files, please see the GitHub repository.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#download","title":"Download","text":"<p>Download pre-built binaries and the accompanying man page from the Release page at GitHub.</p> <p>Alternatively, you can build the program from source as shown in the next step.</p>"},{"location":"getting-started/#build","title":"Build","text":"<p>Clone the GitHub repository. Then use <code>make</code> to build the program:</p> <pre><code>make\n</code></pre>"},{"location":"getting-started/#run","title":"Run","text":"<p>If you downloaded the binary from the Release page, follow the instructions there.</p> <p>If you built the program yourself using <code>make</code>, you can run it with</p> <pre><code>make run\n</code></pre> <p>Alternatively, to run manually:</p> <pre><code>./bin/release/today\n</code></pre> <p>You should see the current date printed out in the <code>YY/MM/DD = Www</code> format, for example</p> <pre><code>25/05/14 = Wed\n</code></pre>"},{"location":"getting-started/#install","title":"Install","text":"<p>To install the program, run</p> <pre><code>make install\n</code></pre> <p>The <code>man</code> page will be installed alongside the program. You might need <code>sudo</code> privileges. Run <code>make help</code> for customization options. To install the binary and the man page manually, copy them to their default destinations or to directories of your choice:</p> Source Default Destination <code>./bin/release/today</code> <code>/usr/local/bin/</code> <code>./docs/man/today.1</code> <code>/usr/local/share/man/man3/</code> <p>To uninstall the program and the man page, run</p> <pre><code>make uninstall\n</code></pre>"},{"location":"getting-started/#ask-for-help","title":"Ask for Help","text":"<p>As is typical with command-line programs, run</p> <pre><code>today --help\n</code></pre> <p>for help. If the man page has been installed, you can run</p> <pre><code>man today\n</code></pre> <p>to view the manual page for more information.</p> <p>For source code and project files, please see the GitHub repository.</p>"},{"location":"makefile-in-detail/","title":"Makefile in Detail","text":"<p>This note explains two key techniques used in the <code>Makefile</code> for this project:</p> <ul> <li>Order-only prerequisites</li> <li>Dependency (<code>.d</code>) files</li> </ul>"},{"location":"makefile-in-detail/#order-only-prerequisites","title":"Order-Only Prerequisites","text":"<p>The syntax of a typical <code>make</code> rule is:</p> <pre><code>target: normal-prerequisites | order-only-prerequisites\n    recipe\n</code></pre> <p>An order-only prerequisite is a prerequisite that comes after normal prerequisites, separated by a vertical bar (<code>|</code>). Like normal prerequisites, order-only prerequisites must be built before the main target. However, unlike normal prerequisites, changes in the timestamps of order-only prerequisites do not trigger rebuilds.</p> <p>In this <code>Makefile</code>, the binary directory <code>$(BIN_DIR)</code> is an order-only prerequisite:</p> <pre><code>$(BIN): $(OBJ) | $(BIN_DIR)\n</code></pre> <p>This rule ensures that the output directory <code>BIN_DIR</code> (<code>./bin/release</code> or <code>./bin/debug</code>) exists before building the binary <code>BIN</code>, but any timestamp changes in that directory won't cause the binary to be rebuilt.</p>"},{"location":"makefile-in-detail/#dependency-d-files","title":"Dependency (<code>.d</code>) files","text":"<p><code>.d</code> files record header dependencies for each source file, enabling automatic recompilation when headers change. They serve as an automatic replacement for explicitly listing headers like:</p> <pre><code>foo.o: foo.cpp foo.hpp\n</code></pre> <p>With <code>.d</code> files, you only need to write:</p> <pre><code>foo.o: foo.cpp\n</code></pre> <p>and auto-generated <code>.d</code> files will handle tracking header dependencies for you.</p> <p>The <code>Makefile</code> for this project generates <code>.d</code> files during compilation with:</p> <pre><code>$(BIN_DIR)/%.o: $(SRC_DIR)/%.cpp $(VER_FILE) | $(BIN_DIR)\n    $(CXX) $(CXXFLAGS) -MMD -MP -c $&lt; -o $@\n</code></pre> <p>where</p> <ul> <li><code>-MMD</code> creates <code>.d</code> files excluding system headers.</li> <li><code>-MP</code> adds phony targets to prevent errors if headers are deleted.</li> </ul> <p>These <code>.d</code> files are included via:</p> <pre><code>-include $(DEP)\n</code></pre> <p>where <code>$(DEP)</code> stand for all the dependency files corresponding to source <code>.cpp</code> files (e.g. <code>today.d</code> for <code>today.cpp</code>). This ensures that changes in header files trigger necessary recompilation automatically.</p> <p>Note that, as a sample project, this project does not necessitate <code>.d</code> files  for its own sake; however, we include this technique here since it represents  an industry best practice.</p>"},{"location":"makefile-in-detail/#why-the-mp-option","title":"Why the <code>-MP</code> Option?","text":"<p>The <code>-MP</code> option causes the compiler to generate phony targets for all relevant header files in the <code>.d</code> files. This prevents <code>make</code> from failing if some headers are deleted later, since the phony targets act as placeholders for the missing files, allowing the build to proceed without errors.</p>"},{"location":"makefile-in-detail/#role-of-include-dep","title":"Role of <code>-include $(DEP)</code>","text":"<p>The <code>-include</code> directive includes <code>.d</code> dependency files if they exist, but suppresses errors if they don't. The leading <code>-</code> tells <code>make</code> to ignore missing files instead of failing, which is important the first time the project is built before any <code>.d</code> files are generated.</p> <p>For source code and project files, please see the GitHub repository.</p>"},{"location":"ready-for-deployment/","title":"Ready for Deployment","text":"<p>As illustrated in the above diagram, this project provides two types of online resources to support users and developers:</p> <ul> <li>MkDocs project website</li> <li>Doxygen source code documentation</li> </ul> <p>MkDocs website hosts user guides and general project documentation, while Doxygen pages offer detailed source code documentation for reference.</p> <p>This document outlines the basic steps to deploy these two websites.</p>"},{"location":"ready-for-deployment/#deploy-mkdocs-website","title":"Deploy MkDocs Website","text":""},{"location":"ready-for-deployment/#1-set-up-environment","title":"1. Set up Environment","text":"<p>Create a Python virtual environment at the root of the project to isolate dependencies:</p> <pre><code>python -m venv venv\n</code></pre> <p>Activate the virtual environment:</p> <pre><code>source venv/bin/activate\n</code></pre> <p>Install MkDocs and the Material theme:</p> <pre><code>pip install mkdocs mkdocs-material\n</code></pre>"},{"location":"ready-for-deployment/#2-configure","title":"2. Configure","text":"<p>Modify <code>mkdocs.yml</code> to configure the project website. Most options are well documented at the MkDocs and Material websites. The additional <code>docs/css/custom-mkdocs.css</code> file increases the font size for tables in Markdown files.</p>"},{"location":"ready-for-deployment/#3-preview","title":"3. Preview","text":"<p>To preview the MkDocs project website locally, run:</p> <pre><code>mkdocs serve\n</code></pre> <p>MkDocs includes a live preview server accessible at <code>http://127.0.0.1:8000</code> that allows you to preview your changes as you write documentation. Any changes to the <code>mkdocs.yml</code> configuration file and markdown files inside the <code>docs</code> directory will be reflected in real time.</p>"},{"location":"ready-for-deployment/#4-deploy","title":"4. Deploy","text":"<p>To deploy the MkDocs project website, run:</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>MkDocs will build the source files in the <code>docs</code> directory into a static site inside the <code>site</code> directory (in <code>.gitignore</code>). It will then deploy this <code>site</code> to the <code>gh-pages</code> branch of the GitHub repository. GitHub Pages will handle updates and render the project website.</p>"},{"location":"ready-for-deployment/#deploy-doxygen-documentation","title":"Deploy Doxygen Documentation","text":""},{"location":"ready-for-deployment/#1-set-up-environment_1","title":"1. Set up Environment","text":"<p>On macOS, install Doxygen by running</p> <pre><code>brew install doxygen\n</code></pre> <p>Generate a template configuration file:</p> <pre><code>doxygen -g Doxygen.original\n</code></pre> <p>Generate a template layout file:</p> <pre><code>doxygen -l DoxygenLayout.original.xml\n</code></pre> <p>Do not edit these original files directly (add them to <code>.gitignore</code>). Instead, make copies for editing, which makes it easier to track changes later:</p> <pre><code>cp Doxyfile.original Doxyfile\ncp DoxygenLayout.original.xml DoxygenLayout.xml\n</code></pre>"},{"location":"ready-for-deployment/#2-configure-docs-generation","title":"2. Configure Docs Generation","text":"<p>Modify the <code>Doxyfile</code> to configure documentation generation. To review your changes, run:</p> <pre><code>diff Doxyfile.original Doxyfile\n</code></pre> <p>For this project, the modified settings are:</p> Key Value <code>PROJECT_NAME</code> \"CppToday\" <code>PROJECT_BRIEF</code> \"What day is it today? A minimal C++23 program.\" <code>PROJECT_LOGO</code> <code>docs/img/logo-doxygen.svg</code> <code>PROJECT_ICON</code> <code>docs/img/icon.svg</code> <code>OUTPUT_DIRECTORY</code> <code>docs/doxygen</code> (in <code>.gitignore</code>) <code>LAYOUT_FILE</code> <code>DoxygenLayout.xml</code> (see below) <code>INPUT</code> <code>src</code> <code>RECURSIVE</code> <code>YES</code> (will look recusrively into <code>src</code>) <code>EXCLUDE</code> <code>tests</code> <code>HTML_EXTRA_STYLESHEET</code> <code>docs/css/custom-doxygen.css</code> (see below) <code>DISABLE_INDEX</code> <code>NO</code> (will show horizontal tabs at top) <code>HTML_FORMULA_FORMAT</code> <code>svg</code> (instead of <code>png</code>; requires Inkscape) <code>GENERATE_LATEX</code> <code>NO</code> <code>HAVE_DOT</code> <code>YES</code> (requires Graphviz, for <code>svg</code>) <code>CALL_GRAPH</code> <code>YES</code> <code>CALLER_GRAPH</code> <code>YES</code> <code>DOT_IMAGE_FORMAT</code> <code>svg</code> (instead of <code>png</code>, for nicer look) <p>The most important setting for Doxygen is <code>INPUT</code>, which tells Doxygen to look into the <code>src</code> directory and its subdirectories, parsing code and comments to generate corresponding documentation.</p> <p>The extra <code>docs/css/custom-doxygen.css</code> removes the panel synchronization button from the Doxygen website, which the author finds distracting.</p>"},{"location":"ready-for-deployment/#3-configure-layout","title":"3. Configure Layout","text":"<p>Edit <code>DoxygenLayout.xml</code> to customize the layout for Doxygen pages. To see your changes, run:</p> <pre><code>diff DoxygenLayout.original.xml DoxygenLayout.xml\n</code></pre> <p>In this project, the following lines were added to the <code>&lt;navindex&gt;</code> element to add two tabs for quick navigation to the GitHub repository and the MkDocs project website:</p> <pre><code>&lt;tab type=\"user\" url=\"http://github.com/aafulei/cpp-today/\" title=\"GitHub\"/&gt;\n&lt;tab type=\"user\" url=\"../../\" title=\"Back to Project Website\"/&gt;\n</code></pre>"},{"location":"ready-for-deployment/#4-deploy_1","title":"4. Deploy","text":"<p>Because MkDocs manages the entire <code>docs</code> directory and Doxygen outputs HTML files inside <code>docs/doxygen</code>, no additional deployment steps are needed. Running:</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>will deploy both the MkDocs site and the Doxygen-generated pages as part of the overall project website.</p> <p>For source code and project files, please see the GitHub repository.</p>"},{"location":"single-source-of-truth/","title":"Single Source of Truth","text":"<p>Software evolves over time.  When multiple parts of a project refer to the same piece of information, such as version numbers or help texts, it is crucial that these references remain consistent and update simultaneously. This project maintains a single source of truth for key information including:</p> <ul> <li>Software version</li> <li>Software help</li> </ul>"},{"location":"single-source-of-truth/#software-version","title":"Software Version","text":"<p>The definitive source for the current software version is the <code>VERSION</code> file located at the root of the repository. This file contains only the version string, for example</p> <pre><code>0.3.0\n</code></pre> <p>During the build process, the <code>Makefile</code> dynamically injects this version string into the source code by defining the <code>VERSION</code> macro. This ensures the version information is embedded consistently throughout the software.</p> <p>Users can verify the version at runtime by running</p> <pre><code>today --version\n</code></pre> <p>which outputs</p> <pre><code>today 0.3.0\n\nCopyright (c) 2025 Aaron Fu Lei. All rights reserved.\n\nWritten by Aaron Fu Lei.\n</code></pre> <p>This version information is also reflected in the manual pages. For example, the footer of the <code>man today</code> page shows the version number, like</p> <pre><code>today 0.2.0          May 2025          TODAY(1)\n</code></pre> <p>Additionally, the Make build system provides a convenient target to display the current version</p> <pre><code>make show-version\n</code></pre> <p>which outputs</p> <pre><code>% ================\n% Software Version\n% ================\n\n0.3.0\n</code></pre> <p>This approach guarantees that the version number remains synchronized across all user-facing outputs and documentation.</p>"},{"location":"single-source-of-truth/#software-help","title":"Software Help","text":"<p>The help information is embedded directly in the <code>today.cpp</code> source file as the single source of truth. This ensures consistency between the command-line help output and the manual page.</p> <p>When users run</p> <pre><code>today --help\n</code></pre> <p>the program prints the embedded help message.</p> <p></p> <p>The same help text, combined with the version output (<code>today --version</code>) is piped to the<code>help2man</code> tool to automatically generate the man page.</p> <p></p> <p>This generation is integrated into the Make build system and can be triggered with</p> <pre><code>make man\n</code></pre> <p>which runs</p> <pre><code>help2man \\\n--name=\"$(cat ./docs/man/desc.txt)\" \\\n--no-info \\\n--output=./docs/man/today.1 \\\n./bin/release/today\n</code></pre> <p>under the hood, where <code>docs/man/desc.txt</code> is a one-line description for the name section of the man page.</p> <p>By using this approach, the project avoids duplicating help content and keeps all user-facing documentation synchronized effortlessly.</p> <p>For source code and project files, please see the GitHub repository.</p>"},{"location":"testing/","title":"Testing","text":"<p>This project includes test scripts for both manual and automated testing.</p> <p>To test the program, clone the GitHub repository, then use <code>make</code> to to run the tests.</p> <pre><code>make test           # Build and test release version\nmake test-debug     # Build and test debug version\n</code></pre> <p>These commands will run <code>tests/test.sh</code> against the corresponding build.</p> <p>On success, you should see output similar to</p> <pre><code>Test passed: 25/05/14 = Wed\n</code></pre> <p>Otherwise, you will see</p> <pre><code>Test failed!\n</code></pre> <p>For source code and project files, please see the GitHub repository.</p>"}]}